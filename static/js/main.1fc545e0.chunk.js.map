{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","App.tsx","api/todos.ts","index.tsx"],"names":["UserInfo","user","className","href","email","name","TodoInfo","todo","id","classNames","completed","title","TodoList","todos","map","username","getUser","userId","usersFromServer","find","App","useState","titleInput","setTitleInput","selectedUser","setUser","newTodos","setNewTodos","inputError","setInputError","selectError","setSelectError","handleChanges","e","target","value","match","action","method","onSubmit","preventDefault","newTask","Math","max","addNewTodo","type","placeholder","onChange","disabled","ReactDOM","render","document","getElementById"],"mappings":"4OAWaA,EAA4B,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAC1C,OACE,mBAAGC,UAAU,WAAWC,KAAI,iBAAYF,EAAKG,OAA7C,SACGH,EAAKI,QCCCC,EAA4B,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAC1C,OACE,0BACE,UAASA,EAAKC,GACdN,UAAWO,IACT,WAAY,CAAE,sBAAuBF,EAAKG,YAH9C,UAME,oBAAIR,UAAU,kBAAd,SACGK,EAAKI,QAGPJ,EAAKN,MAAQ,cAAC,EAAD,CAAUA,KAAMM,EAAKN,WCrB5BW,EAA4B,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAC1C,OACE,yBAASX,UAAU,WAAnB,SACGW,EAAMC,KAAI,SAAAP,GAAI,OACb,cAAC,EAAD,CAAwBA,KAAMA,GAAfA,EAAKC,UCVb,GACb,CACEA,GAAI,EACJH,KAAM,gBACNU,SAAU,OACVX,MAAO,qBAET,CACEI,GAAI,EACJH,KAAM,eACNU,SAAU,YACVX,MAAO,qBAET,CACEI,GAAI,EACJH,KAAM,mBACNU,SAAU,WACVX,MAAO,sBAET,CACEI,GAAI,EACJH,KAAM,mBACNU,SAAU,WACVX,MAAO,6BAET,CACEI,GAAI,EACJH,KAAM,mBACNU,SAAU,SACVX,MAAO,4BAET,CACEI,GAAI,EACJH,KAAM,uBACNU,SAAU,mBACVX,MAAO,2BAET,CACEI,GAAI,EACJH,KAAM,kBACNU,SAAU,eACVX,MAAO,0BAET,CACEI,GAAI,EACJH,KAAM,2BACNU,SAAU,gBACVX,MAAO,wBAET,CACEI,GAAI,EACJH,KAAM,kBACNU,SAAU,WACVX,MAAO,2BAET,CACEI,GAAI,GACJH,KAAM,qBACNU,SAAU,iBACVX,MAAO,2BClDX,SAASY,EAAQC,GAGf,OAFkBC,EAAgBC,MAAK,SAAAlB,GAAI,OAAIA,EAAKO,KAAOS,MAEvC,KAGf,IAAMJ,ECfE,CACb,CACEL,GAAI,EACJG,MAAO,qBACPD,WAAW,EACXO,OAAQ,GAEV,CACET,GAAI,GACJG,MAAO,kBACPD,WAAW,EACXO,OAAQ,GAEV,CACET,GAAI,EACJG,MAAO,qCACPD,WAAW,EACXO,OAAQ,IDFiCH,KAAI,SAAAP,GAAI,kCAChDA,GADgD,IAEnDN,KAAMe,EAAQT,EAAKU,aAGRG,EAAgB,WAC3B,MAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAgCF,mBAAS,KAAzC,mBAAOG,EAAP,KAAqBC,EAArB,KACA,EAAgCJ,mBAASR,GAAzC,mBAAOa,EAAP,KAAiBC,EAAjB,KACA,EAAoCN,oBAAS,GAA7C,mBAAOO,EAAP,KAAmBC,EAAnB,KACA,EAAsCR,oBAAS,GAA/C,mBAAOS,EAAP,KAAoBC,EAApB,KAEA,SAASC,EACPC,GAEA,MAAwBA,EAAEC,OAAlB7B,EAAR,EAAQA,KAAM8B,EAAd,EAAcA,MAGD,eAAT9B,GAAyB8B,EAAMC,MAFhB,wCAGjBb,EAAcY,GACdN,GAAc,IAGH,iBAATxB,IACFoB,EAAQU,GACRJ,GAAe,IA8BnB,OACE,sBAAK7B,UAAU,MAAf,UACE,+CAEA,uBACEmC,OAAO,aACPC,OAAO,OACPC,SAAU,SAACN,GACTA,EAAEO,iBAlCS,WACjB,IAAMlB,GAAgC,MAAjBE,EAInB,OAHAO,GAAe,QACfF,GAAc,GAKhB,IACMY,EAAU,CACdjC,GAFYkC,KAAKC,IAAL,MAAAD,KAAI,YAAQhB,EAASZ,KAAI,SAAAP,GAAI,OAAIA,EAAKC,QAEtC,EACZG,MAAOW,EACPZ,WAAW,EACXO,QAASO,EACTvB,KAAMe,GAASQ,IAGjBG,EAAY,GAAD,mBACND,GADM,CAETe,KAGFlB,EAAc,IACdE,EAAQ,KAYFmB,IALJ,UAQE,qBAAK1C,UAAU,QAAf,SACE,kCACG,UACD,uBACE2C,KAAK,OACL,UAAQ,aACRxC,KAAK,aACLyC,YAAY,gBACZX,MAAOb,EACPyB,SAAUf,KAETV,GAAcM,GACf,sBAAM1B,UAAU,QAAhB,uCAON,sBAAKA,UAAU,QAAf,UACE,kCACG,SACD,yBACE,UAAQ,aACRG,KAAK,eACL8B,MAAOX,EACPuB,SAAUf,EAJZ,UAME,wBAAQG,MAAM,IAAYa,UAAQ,EAAlC,0BAAuB,GACtB9B,EAAgBJ,KAAI,SAAAb,GAAI,OACvB,wBAAQkC,MAAOlC,EAAKO,GAApB,SAAuCP,EAAKI,MAAfJ,EAAKO,aAKrB,MAAjBgB,GAAwBM,GACxB,sBAAM5B,UAAU,QAAhB,qCAMJ,wBAAQ2C,KAAK,SAAS,UAAQ,eAA9B,oBAKF,cAAC,EAAD,CAAUhC,MAAOa,QE9HvBuB,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.1fc545e0.chunk.js","sourcesContent":["export interface User {\n  id: number,\n  name: string,\n  username: string,\n  email: string,\n}\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  return (\n    <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n      {user.name}\n    </a>\n  );\n};\n","import classNames from 'classnames';\nimport { User, UserInfo } from '../UserInfo';\n\nexport interface Todo {\n  id: number,\n  title: string,\n  completed: boolean,\n  userId: number,\n  user: User | null,\n}\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  return (\n    <article\n      data-id={todo.id}\n      className={classNames(\n        'TodoInfo', { 'TodoInfo--completed': todo.completed },\n      )}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {todo.title}\n      </h2>\n\n      {todo.user && <UserInfo user={todo.user} />}\n    </article>\n  );\n};\n","import { Todo, TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo key={todo.id} todo={todo} />\n      ))}\n    </section>\n  );\n};\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import { useState } from 'react';\nimport './App.scss';\nimport { TodoList } from './components/TodoList';\nimport { User } from './components/UserInfo';\nimport { Todo } from './components/TodoInfo';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nfunction getUser(userId: number): User | null {\n  const foundUser = usersFromServer.find(user => user.id === userId);\n\n  return foundUser || null;\n}\n\nexport const todos: Todo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUser(todo.userId),\n}));\n\nexport const App: React.FC = () => {\n  const [titleInput, setTitleInput] = useState('');\n  const [selectedUser, setUser] = useState('0');\n  const [newTodos, setNewTodos] = useState(todos);\n  const [inputError, setInputError] = useState(false);\n  const [selectError, setSelectError] = useState(false);\n\n  function handleChanges(\n    e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>,\n  ) {\n    const { name, value } = e.target;\n    const regExInput = /^(.*[a-zA-Z0-9 \\u0400-\\u04FF])$/gmi;\n\n    if (name === 'titleInput' && value.match(regExInput)) {\n      setTitleInput(value);\n      setInputError(false);\n    }\n\n    if (name === 'selectedUser') {\n      setUser(value);\n      setSelectError(false);\n    }\n  }\n\n  const addNewTodo = () => {\n    if (!(titleInput && (selectedUser !== '0'))) {\n      setSelectError(true);\n      setInputError(true);\n\n      return;\n    }\n\n    const newId = Math.max(...newTodos.map(todo => todo.id));\n    const newTask = {\n      id: newId + 1,\n      title: titleInput,\n      completed: false,\n      userId: +selectedUser,\n      user: getUser(+selectedUser),\n    };\n\n    setNewTodos([\n      ...newTodos,\n      newTask,\n    ]);\n\n    setTitleInput('');\n    setUser('0');\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={(e) => {\n          e.preventDefault();\n          addNewTodo();\n        }}\n      >\n        <div className=\"field\">\n          <label>\n            {'Title: '}\n            <input\n              type=\"text\"\n              data-cy=\"titleInput\"\n              name=\"titleInput\"\n              placeholder=\"Enter a title\"\n              value={titleInput}\n              onChange={handleChanges}\n            />\n            {(!titleInput && inputError) && (\n              <span className=\"error\">\n                Please enter a title\n              </span>\n            )}\n          </label>\n        </div>\n\n        <div className=\"field\">\n          <label>\n            {'User: '}\n            <select\n              data-cy=\"userSelect\"\n              name=\"selectedUser\"\n              value={selectedUser}\n              onChange={handleChanges}\n            >\n              <option value=\"0\" key={0} disabled>Choose a user</option>\n              {usersFromServer.map(user => (\n                <option value={user.id} key={user.id}>{user.name}</option>\n              ))}\n            </select>\n          </label>\n\n          {(selectedUser === '0' && selectError) && (\n            <span className=\"error\">\n              Please choose a user\n            </span>\n          )}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={newTodos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}